{"version":3,"sources":["webpack:///./src/pages/news/index.tsx","webpack:///./src/components/cards/titled-card.tsx","webpack:///./src/components/cards/side-images-card.tsx","webpack:///./src/components/layouts/side-pictured.tsx"],"names":["ArticlePreview","props","w","mb","title","dangerouslySetInnerHTML","__html","html","to","pageName","color","NewsPage","articles","data","allMdx","edges","map","x","node","sort","a","frontmatter","b","date","excerpt","slug","substr","lastIndexOf","pageTitle","images","src","alt","direction","flex","article","index","key","TitledCard","h","maxW","borderBottomColor","borderBottomWidth","fontFamily","size","children","SideImagesCard","image","SidePicturedLayout","nodes","useStaticQuery","allFile","transformedImages","find","absolutePath","includes","publicURL","mr"],"mappings":"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","file":"component---src-pages-news-index-tsx-c411a7872cc0ef578160.js","sourcesContent":["import * as React from \"react\";\n\nimport { Box, Flex, Link } from \"@chakra-ui/react\";\nimport { graphql, Link as GatsbyLink } from \"gatsby\";\nimport TitledCard from \"../../components/cards/titled-card\";\nimport SidePicturedLayout from \"../../components/layouts/side-pictured\";\n\nconst ArticlePreview = (props: {\n    title: string;\n    html: string;\n    pageName: string;\n}) => {\n    return (\n        <Box w=\"100%\" mb=\"4\">\n            <TitledCard title={props.title}>\n                <Box dangerouslySetInnerHTML={{ __html: props.html }} />\n                <Box>\n                    <GatsbyLink to={props.pageName}>\n                        <Link color=\"refcolor\">Read more...</Link>\n                    </GatsbyLink>\n                </Box>\n            </TitledCard>\n        </Box>\n    );\n};\n\nconst NewsPage = (props: { data: QueryReturnType }) => {\n    const articles = props.data.allMdx.edges\n        .map((x) => x.node)\n        .sort(({ frontmatter: a }, { frontmatter: b }) =>\n            a.date == b.date ? 0 : a.date < b.date ? 1 : -1\n        )\n        .map(({ excerpt, slug, frontmatter: fm }) => ({\n            html: excerpt,\n            title: fm.title,\n            pageName: slug.substr(slug.lastIndexOf(\"/\") + 1),\n        }));\n\n    return (\n        <SidePicturedLayout\n            pageName=\"news\"\n            pageTitle=\"News\"\n            images={[\n                { src: \"img/news.jpg\", alt: \"news\" },\n            ]}\n        >\n            <Flex direction=\"column\" flex=\"1\">\n                {articles.map((article, index) => (\n                    <ArticlePreview key={index} {...article} />\n                ))}\n            </Flex>\n        </SidePicturedLayout>\n    );\n};\n\ntype QueryReturnType = {\n    allMdx: {\n        edges: {\n            node: {\n                excerpt: string;\n                slug: string;\n                frontmatter: {\n                    date: string;\n                    title: string;\n                };\n            };\n        }[];\n    };\n};\n\nexport const query = graphql`\n  query NewsArticles {\n    allMdx(filter: { slug: { regex: \"/news/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n          }\n          excerpt(pruneLength: 400)\n          slug\n        }\n      }\n    }\n  }\n`;\n\nexport default NewsPage;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading } from \"@chakra-ui/react\";\n\ninterface TitledCardProps {\n    title: string;\n    children?: React.ReactNode;\n}\n\nconst TitledCard = (props: TitledCardProps) => {\n    return (\n        <Card w=\"100%\" h=\"100%\">\n            <Flex direction=\"column\" maxW=\"100%\">\n                <Box\n                    w=\"100%\"\n                    borderBottomColor=\"seperatorcolor\"\n                    borderBottomWidth=\"thin\"\n                    mb=\"4\"\n                >\n                    <Heading fontFamily=\"heading\" size=\"lg\">\n                        {props.title}\n                    </Heading>\n                </Box>\n                <Box color=\"contentcolor\" maxW=\"100%\">\n                    {props.children}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default TitledCard;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading, Image } from \"@chakra-ui/react\";\n\nexport interface ImageProps {\n    src: string;\n    alt: string;\n}\ninterface SideImagesCardProps {\n    title?: string;\n    images: ImageProps[];\n}\n\nconst SideImagesCard = (props: SideImagesCardProps) => {\n    return (\n        <Card w=\"100%\">\n            <Flex direction=\"column\">\n                {props.title &&\n                    <Box\n                        w=\"100%\"\n                        borderBottomColor=\"seperatorcolor\"\n                        borderBottomWidth=\"thin\"\n                        mb=\"4\"\n                    >\n                        <Heading fontFamily=\"heading\" size=\"lg\">\n                            {props.title}\n                        </Heading>\n                    </Box>}\n                <Box>\n                    {props.images.map((image, index) =>\n                        <Image\n                            key={index}\n                            src={image.src}\n                            alt={image.alt}\n                            mb=\"4\"\n                        />\n                    )}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default SideImagesCard;\n","import * as React from \"react\";\nimport Base from \"../../components/base\";\n\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport SideImagesCard, {\n    ImageProps,\n} from \"../../components/cards/side-images-card\";\nimport { LinkName } from \"../menu\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface SidePicturedLayoutProps {\n    pageName: LinkName;\n    pageTitle?: string;\n    images: ImageProps[];\n    children?: React.ReactNode;\n}\n\nconst SidePicturedLayout = (props: SidePicturedLayoutProps) => {\n    const { pageName, pageTitle, images, children } = props;\n\n    const imageData = useStaticQuery(graphql`\n      query imageQuery {\n          allFile(filter: { sourceInstanceName: { eq: \"assets\" }}) {\n            edges {\n              node {\n                absolutePath\n                publicURL\n              }\n            }\n          }\n        }`);\n\n    const nodes = imageData.allFile.edges.map(x => x.node);\n    const transformedImages = images.map(({ src, alt }) => ({ src: nodes.find(x => x.absolutePath.includes(src)).publicURL, alt }));\n\n    return (\n        <Base pageName={pageName}>\n            <Flex direction={[\"column\", \"column\", \"row\"]} w=\"100%\">\n                <Box\n                    mr={[\"0\", \"0\", \"4\"]}\n                    mb={[\"4\", \"4\", \"0\"]}\n                    w={[\"100%\", \"100%\", \"sm\"]}\n                >\n                    <SideImagesCard\n                        title={pageTitle}\n                        images={transformedImages}\n                    />\n                </Box>\n\n                <Box flex=\"1\">\n                    {children}\n                </Box>\n            </Flex>\n        </Base>\n    );\n};\n\nexport default SidePicturedLayout;\n"],"sourceRoot":""}