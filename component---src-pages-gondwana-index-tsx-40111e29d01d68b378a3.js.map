{"version":3,"sources":["webpack:///./src/pages/gondwana/index.tsx","webpack:///./src/components/cards/titled-card.tsx","webpack:///./src/md-graphql.tsx","webpack:///./src/components/related-link.tsx","webpack:///./src/components/cards/cover-image-card.tsx","webpack:///./src/components/layouts/cover-image.tsx"],"names":["GondwanaPage","useStaticQuery","allFile","edges","map","x","node","find","name","match","LoadWithMD","html","fm","pageName","pageTitle","coverImgSrc","coverImgAlt","maxW","title","to","text","absoluteUrl","mt","dangerouslySetInnerHTML","__html","TitledCard","props","w","h","direction","borderBottomColor","borderBottomWidth","mb","fontFamily","size","color","children","filePath","render","query","data","nodes","allMarkdownRemark","pattern","RegExp","fileAbsolutePath","frontmatter","RelatedLink","fontSize","href","CoverImageCard","src","alt","width","CoverImageLayout","coverImg","absolutePath","flex","mr","publicURL","minW"],"mappings":"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","file":"component---src-pages-gondwana-index-tsx-40111e29d01d68b378a3.js","sourcesContent":["import * as React from \"react\";\nimport { Box, Link, Text } from \"@chakra-ui/react\";\nimport RelatedLink from \"../../components/related-link\";\nimport CoverImageLayout from \"../../components/layouts/cover-image\";\nimport TitledCard from \"../../components/cards/titled-card\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { LoadWithMD } from \"../../md-graphql\";\n\ninterface FrontmatterProps {\n    title: string;\n}\nconst GondwanaPage = () => {\n\n    const data = useStaticQuery(graphql`\n        {\n          allFile(filter: { extension: { eq: \"pdf\" } }) {\n            edges {\n              node {\n                publicURL\n                name\n              }\n            }\n          }\n        }\n    `)\n    const principles = data.allFile.edges.map(x => x.node).find(x => x.name.match(\"principles of global\"));\n    return (LoadWithMD<FrontmatterProps>(\n        \"gondwana.md\",\n        (html, fm) => (\n            <CoverImageLayout\n                pageName=\"gondwana\"\n                pageTitle=\"Gondwana\"\n                coverImgSrc=\"/assets/img/gondwana.gif\"\n                coverImgAlt=\"Gondwana\"\n            >\n                <Box maxW=\"100vw\">\n                    <TitledCard title={fm.title}>\n                        <RelatedLink\n                            to=\"https://www.reeves.nl/10e6583b7cd21fe828826ca84a96f0e7/Preface-2025-large.pdf\"\n                            text=\"Preface 2025\"\n                            absoluteUrl\n                        />\n                        <RelatedLink\n                            to=\"animations\"\n                            text=\"Animations\"\n                        />\n                        <RelatedLink to=\"updates\" text=\"Research updates\" />\n                        <RelatedLink to=\"other-material\" text=\"Appendices\" />\n\n                        <Box mt=\"4\" dangerouslySetInnerHTML={{ __html: html }} />\n                    </TitledCard>\n                </Box>\n            </CoverImageLayout>\n        )\n    ));\n};\n\nexport default GondwanaPage;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading } from \"@chakra-ui/react\";\n\ninterface TitledCardProps {\n    title: string;\n    children?: React.ReactNode;\n}\n\nconst TitledCard = (props: TitledCardProps) => {\n    return (\n        <Card w=\"100%\" h=\"100%\">\n            <Flex direction=\"column\" maxW=\"100%\">\n                <Box\n                    w=\"100%\"\n                    borderBottomColor=\"seperatorcolor\"\n                    borderBottomWidth=\"thin\"\n                    mb=\"4\"\n                >\n                    <Heading fontFamily=\"heading\" size=\"lg\">\n                        {props.title}\n                    </Heading>\n                </Box>\n                <Box color=\"contentcolor\" maxW=\"100%\">\n                    {props.children}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default TitledCard;\n","import * as React from \"react\";\n\nimport { graphql, StaticQuery } from \"gatsby\";\n\nconst fetchQuery = graphql`\n        query MarkdownFiles {\n          allMarkdownRemark {\n            edges {\n              node {\n                html\n                frontmatter {\n                  title,\n                  image_alt,\n                  image_path,\n                  readmore_uri,\n                }\n                fileAbsolutePath\n              }\n            }\n          }\n        }\n    `;\n\ntype QueryReturnType = {\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        html: string;\n        frontmatter: any;\n        fileAbsolutePath: string;\n      };\n    }[];\n  };\n};\n\nexport function LoadWithMD<FrontmatterProps>(\n  filePath: string,\n  render: (html: string, fm: FrontmatterProps) => React.ReactNode,\n): JSX.Element {\n  return (<StaticQuery\n    query={fetchQuery}\n    render={(data: QueryReturnType) => {\n      const nodes = data.allMarkdownRemark.edges.map((x) => x.node);\n      const pattern = new RegExp(filePath, \"g\");\n\n      const fileInfo = nodes.find(({ fileAbsolutePath }) =>\n        fileAbsolutePath.match(pattern)\n      );\n\n      const { html, frontmatter } = fileInfo as {\n        html: string;\n        frontmatter: FrontmatterProps;\n        fileAbsolutePath: string;\n      };\n\n      return render(html, frontmatter);\n    }}\n  />);\n}\n","import { Link as GatsbyLink } from \"gatsby\";\nimport { Box, Link } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst RelatedLink = (props: { to: string; text: string, absoluteUrl?: boolean }) => {\n    return (\n        <Box borderBottomColor=\"seperatorcolor\" borderBottomWidth=\"thin\">\n            { !props.absoluteUrl &&\n                <GatsbyLink to={props.to}>\n                    <Link color=\"refcolor\" fontSize=\"xl\">{props.text}</Link>\n                </GatsbyLink>\n            }\n            { props.absoluteUrl &&\n                <Link color=\"refcolor\" fontSize=\"xl\" href={props.to}>{props.text}</Link>\n            }\n        </Box>\n    );\n};\n\nexport default RelatedLink;\n","import * as React from \"react\";\nimport { Box, Center, Flex, Heading, Image } from \"@chakra-ui/react\";\nimport Card from \"../card\";\n\ninterface CoverImageCardProps {\n  title?: string;\n  src: string;\n  alt: string;\n}\nconst CoverImageCard = (props: CoverImageCardProps) => {\n  return (\n    <Card w=\"100%\">\n      <Flex direction=\"column\">\n        {props.title &&\n          <Box\n            w=\"100%\"\n            borderBottomColor=\"seperatorcolor\"\n            borderBottomWidth=\"thin\"\n            mb=\"4\"\n          >\n            <Heading fontFamily=\"heading\" size=\"lg\">\n              {props.title}\n            </Heading>\n          </Box>}\n        <Box color=\"contentcolor\">\n          <Center>\n            <Image\n              src={props.src}\n              alt={props.alt}\n              width={[\"100%\", \"max(30vh, 100%)\"]}\n            />\n          </Center>\n        </Box>\n      </Flex>\n    </Card>\n  );\n};\n\nexport default CoverImageCard;\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport React from \"react\";\nimport Base from \"../base\";\nimport CoverImageCard from \"../cards/cover-image-card\";\nimport { LinkName } from \"../menu\";\n\ninterface CoverImageLayoutProps {\n    pageName: LinkName;\n    pageTitle?: string;\n    coverImgSrc: string;\n    coverImgAlt: string;\n    children?: React.ReactNode;\n}\n\nconst CoverImageLayout = (props: CoverImageLayoutProps) => {\n    const {\n        pageName,\n        pageTitle,\n        coverImgSrc,\n        coverImgAlt,\n        children,\n    } = props;\n\n    const coverImgFetch = useStaticQuery(graphql`\n    query CoverImages {\n      allFile(filter: { sourceInstanceName: { eq: \"assets\" } }) {\n        edges {\n          node {\n            publicURL\n            absolutePath\n          }\n        }\n      }\n    }\n    `);\n\n    const coverImg = coverImgFetch.allFile.edges.map(x => x.node).find(x => x.absolutePath.match(coverImgSrc));\n\n    return (\n        <Base pageName={pageName}>\n            <Flex direction={[\"column\", \"column\", \"row\"]} w=\"100%\">\n                <Box flex=\"2\" mr={[\"0\", \"0\", \"4\"]} mb={[\"4\", \"4\", \"0\"]} w={[\"100%\", \"auto\", \"auto\"]}>\n                    <CoverImageCard\n                        title={pageTitle}\n                        src={coverImg.publicURL}\n                        alt={coverImgAlt}\n                    />\n                </Box>\n                <Box flex=\"1\" minW=\"md\">\n                    {children}\n                </Box>\n            </Flex>\n        </Base>\n    );\n};\n\nexport default CoverImageLayout;\n"],"sourceRoot":""}