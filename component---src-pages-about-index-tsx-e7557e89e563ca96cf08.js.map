{"version":3,"sources":["webpack:///./src/pages/about/index.tsx","webpack:///./src/components/cards/titled-card.tsx","webpack:///./src/components/cards/side-images-card.tsx","webpack:///./src/components/layouts/side-pictured.tsx"],"names":["Section","props","w","mb","title","dangerouslySetInnerHTML","__html","html","to","pageName","color","AboutPage","articles","data","allMarkdownRemark","edges","map","x","node","filter","fileAbsolutePath","match","fm","frontmatter","readmore_uri","sort","pageTitle","images","src","alt","direction","flex","article","index","key","TitledCard","h","maxW","borderBottomColor","borderBottomWidth","fontFamily","size","children","SideImagesCard","image","SidePicturedLayout","nodes","useStaticQuery","allFile","transformedImages","find","absolutePath","includes","publicURL","mr"],"mappings":"2FAAA,+FAOMA,EAAU,SAACC,GACf,OACE,gBAAC,IAAD,CAAKC,EAAE,OAAOC,GAAG,KACf,gBAAC,IAAD,CAAYC,MAAOH,EAAMG,OACvB,gBAAC,IAAD,CAAKC,wBAAyB,CAAEC,OAAQL,EAAMM,QAC9C,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYC,GAAIP,EAAMQ,UACpB,gBAAC,IAAD,CAAMC,MAAM,YAAZ,qBAyEGC,UAjEG,SAACV,GACjB,IAAMW,EAAWX,EAAMY,KAAKC,kBAAkBC,MAC3CC,KAAI,SAACC,GAAD,OAAOA,EAAEC,QACbC,QAAO,qBAAGC,iBAAwCC,MAAM,kBACxDL,KAAI,gBAAGT,EAAH,EAAGA,KAAmBe,EAAtB,EAASC,YAAT,MAAgC,CACnChB,OACAH,MAAOkB,EAAGlB,MACVK,SAAUa,EAAGE,iBAKjB,OAFAZ,EAASa,MAAK,uBAAGrB,MAAH,EAAoBA,OAAkC,EAAI,KAGtE,gBAAC,IAAD,CACEK,SAAS,QACTiB,UAAU,QACVC,OAAQ,CACN,CAAEC,IAAK,mBAAoBC,IAAK,QAChC,CACED,IAAK,6BACLC,IAAK,eAIT,gBAAC,IAAD,CAAMC,UAAU,SAASC,KAAK,KAC3BnB,EAASI,KAAI,SAACgB,EAASC,GAAV,OACZ,gBAACjC,EAAD,eAASkC,IAAKD,GAAWD,W,oCChDnC,gEAgCeG,IAtBI,SAAClC,GAChB,OACI,gBAAC,IAAD,CAAMC,EAAE,OAAOkC,EAAE,QACb,gBAAC,IAAD,CAAMN,UAAU,SAASO,KAAK,QAC1B,gBAAC,IAAD,CACInC,EAAE,OACFoC,kBAAkB,iBAClBC,kBAAkB,OAClBpC,GAAG,KAEH,gBAAC,IAAD,CAASqC,WAAW,UAAUC,KAAK,MAC9BxC,EAAMG,QAGf,gBAAC,IAAD,CAAKM,MAAM,eAAe2B,KAAK,QAC1BpC,EAAMyC,c,0HCmBZC,EA9BQ,SAAC1C,GACpB,OACI,gBAAC,IAAD,CAAMC,EAAE,QACJ,gBAAC,IAAD,CAAM4B,UAAU,UACX7B,EAAMG,OACH,gBAAC,IAAD,CACIF,EAAE,OACFoC,kBAAkB,iBAClBC,kBAAkB,OAClBpC,GAAG,KAEH,gBAAC,IAAD,CAASqC,WAAW,UAAUC,KAAK,MAC9BxC,EAAMG,QAGnB,gBAAC,IAAD,KACKH,EAAM0B,OAAOX,KAAI,SAAC4B,EAAOX,GAAR,OACd,gBAAC,IAAD,CACIC,IAAKD,EACLL,IAAKgB,EAAMhB,IACXC,IAAKe,EAAMf,IACX1B,GAAG,a,YCsBhB0C,IAxCY,SAAC5C,GAAmC,IACnDQ,EAA0CR,EAA1CQ,SAAUiB,EAAgCzB,EAAhCyB,UAAWC,EAAqB1B,EAArB0B,OAAQe,EAAazC,EAAbyC,SAc/BI,EAZYC,YAAe,aAYTC,QAAQjC,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAC3C+B,EAAoBtB,EAAOX,KAAI,gBAAGY,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,MAAmB,CAAED,IAAKkB,EAAMI,MAAK,SAAAjC,GAAC,OAAIA,EAAEkC,aAAaC,SAASxB,MAAMyB,UAAWxB,UAExH,OACI,gBAAC,IAAD,CAAMpB,SAAUA,GACZ,gBAAC,IAAD,CAAMqB,UAAW,CAAC,SAAU,SAAU,OAAQ5B,EAAE,QAC5C,gBAAC,IAAD,CACIoD,GAAI,CAAC,IAAK,IAAK,KACfnD,GAAI,CAAC,IAAK,IAAK,KACfD,EAAG,CAAC,OAAQ,OAAQ,OAEpB,gBAAC,EAAD,CACIE,MAAOsB,EACPC,OAAQsB,KAIhB,gBAAC,IAAD,CAAKlB,KAAK,KACLW","file":"component---src-pages-about-index-tsx-e7557e89e563ca96cf08.js","sourcesContent":["import * as React from \"react\";\n\nimport { Box, Flex, Link } from \"@chakra-ui/react\";\nimport { graphql, Link as GatsbyLink } from \"gatsby\";\nimport TitledCard from \"../../components/cards/titled-card\";\nimport SidePicturedLayout from \"../../components/layouts/side-pictured\";\n\nconst Section = (props: { title: string; html: string; pageName: string }) => {\n  return (\n    <Box w=\"100%\" mb=\"4\">\n      <TitledCard title={props.title}>\n        <Box dangerouslySetInnerHTML={{ __html: props.html }} />\n        <Box>\n          <GatsbyLink to={props.pageName}>\n            <Link color=\"refcolor\">Read more...</Link>\n          </GatsbyLink>\n        </Box>\n      </TitledCard>\n    </Box>\n  );\n};\n\nconst AboutPage = (props: { data: QueryReturnType }) => {\n  const articles = props.data.allMarkdownRemark.edges\n    .map((x) => x.node)\n    .filter(({ fileAbsolutePath }) => fileAbsolutePath.match(/aboutpage\\//))\n    .map(({ html, frontmatter: fm }) => ({\n      html,\n      title: fm.title,\n      pageName: fm.readmore_uri,\n    }));\n\n  articles.sort(({ title: titA }, { title: titB }) => (titA < titB ? -1 : 0));\n\n  return (\n    <SidePicturedLayout\n      pageName=\"about\"\n      pageTitle=\"About\"\n      images={[\n        { src: \"img/personal.jpg\", alt: \"news\" },\n        {\n          src: \"img/magnetic-anomalies.bmp\",\n          alt: \"animation\",\n        },\n      ]}\n    >\n      <Flex direction=\"column\" flex=\"1\">\n        {articles.map((article, index) => (\n          <Section key={index} {...article} />\n        ))}\n      </Flex>\n    </SidePicturedLayout>\n  );\n};\n\ntype QueryReturnType = {\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        html: string;\n        frontmatter: {\n          title: string;\n          readmore_uri: string;\n        };\n        fileAbsolutePath: string;\n      };\n    }[];\n  };\n};\n\nexport const query = graphql`\n  query AboutExcerpts {\n    allMarkdownRemark {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            readmore_uri\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`;\n\nexport default AboutPage;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading } from \"@chakra-ui/react\";\n\ninterface TitledCardProps {\n    title: string;\n    children?: React.ReactNode;\n}\n\nconst TitledCard = (props: TitledCardProps) => {\n    return (\n        <Card w=\"100%\" h=\"100%\">\n            <Flex direction=\"column\" maxW=\"100%\">\n                <Box\n                    w=\"100%\"\n                    borderBottomColor=\"seperatorcolor\"\n                    borderBottomWidth=\"thin\"\n                    mb=\"4\"\n                >\n                    <Heading fontFamily=\"heading\" size=\"lg\">\n                        {props.title}\n                    </Heading>\n                </Box>\n                <Box color=\"contentcolor\" maxW=\"100%\">\n                    {props.children}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default TitledCard;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading, Image } from \"@chakra-ui/react\";\n\nexport interface ImageProps {\n    src: string;\n    alt: string;\n}\ninterface SideImagesCardProps {\n    title?: string;\n    images: ImageProps[];\n}\n\nconst SideImagesCard = (props: SideImagesCardProps) => {\n    return (\n        <Card w=\"100%\">\n            <Flex direction=\"column\">\n                {props.title &&\n                    <Box\n                        w=\"100%\"\n                        borderBottomColor=\"seperatorcolor\"\n                        borderBottomWidth=\"thin\"\n                        mb=\"4\"\n                    >\n                        <Heading fontFamily=\"heading\" size=\"lg\">\n                            {props.title}\n                        </Heading>\n                    </Box>}\n                <Box>\n                    {props.images.map((image, index) =>\n                        <Image\n                            key={index}\n                            src={image.src}\n                            alt={image.alt}\n                            mb=\"4\"\n                        />\n                    )}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default SideImagesCard;\n","import * as React from \"react\";\nimport Base from \"../../components/base\";\n\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport SideImagesCard, {\n    ImageProps,\n} from \"../../components/cards/side-images-card\";\nimport { LinkName } from \"../menu\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface SidePicturedLayoutProps {\n    pageName: LinkName;\n    pageTitle?: string;\n    images: ImageProps[];\n    children?: React.ReactNode;\n}\n\nconst SidePicturedLayout = (props: SidePicturedLayoutProps) => {\n    const { pageName, pageTitle, images, children } = props;\n\n    const imageData = useStaticQuery(graphql`\n      query imageQuery {\n          allFile(filter: { sourceInstanceName: { eq: \"assets\" }}) {\n            edges {\n              node {\n                absolutePath\n                publicURL\n              }\n            }\n          }\n        }`);\n\n    const nodes = imageData.allFile.edges.map(x => x.node);\n    const transformedImages = images.map(({ src, alt }) => ({ src: nodes.find(x => x.absolutePath.includes(src)).publicURL, alt }));\n\n    return (\n        <Base pageName={pageName}>\n            <Flex direction={[\"column\", \"column\", \"row\"]} w=\"100%\">\n                <Box\n                    mr={[\"0\", \"0\", \"4\"]}\n                    mb={[\"4\", \"4\", \"0\"]}\n                    w={[\"100%\", \"100%\", \"sm\"]}\n                >\n                    <SideImagesCard\n                        title={pageTitle}\n                        images={transformedImages}\n                    />\n                </Box>\n\n                <Box flex=\"1\">\n                    {children}\n                </Box>\n            </Flex>\n        </Base>\n    );\n};\n\nexport default SidePicturedLayout;\n"],"sourceRoot":""}