{"version":3,"sources":["webpack:///./src/components/cards/latest-update.tsx","webpack:///./src/components/cards/short-about.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/cards/titled-card.tsx","webpack:///./src/md-graphql.tsx","webpack:///./src/components/cards/cover-image-card.tsx","webpack:///./src/components/layouts/cover-image.tsx"],"names":["LatestUpdateCard","LoadWithMD","html","fm","title","dangerouslySetInnerHTML","__html","color","href","readmore_uri","ShortAboutCard","mugshotData","useStaticQuery","direction","w","mr","mb","src","allFile","edges","node","publicURL","alt","image_alt","flex","IndexPage","pageName","coverImgSrc","coverImgAlt","maxW","TitledCard","props","h","borderBottomColor","borderBottomWidth","fontFamily","size","children","filePath","render","query","data","nodes","allMarkdownRemark","map","x","pattern","RegExp","find","fileAbsolutePath","match","frontmatter","CoverImageCard","width","CoverImageLayout","pageTitle","coverImg","absolutePath","minW"],"mappings":"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","file":"component---src-pages-index-tsx-b2c9016591db3ec89141.js","sourcesContent":["import * as React from \"react\";\nimport TitledCard from \"./titled-card\";\nimport { LoadWithMD } from \"../../md-graphql\";\nimport { Box, Link } from \"@chakra-ui/react\";\n\ninterface FrontmatterProps {\n    title: string;\n    readmore_uri: string;\n}\n\nconst LatestUpdateCard = () => (LoadWithMD<FrontmatterProps>(\n    \"latest-update.md\",\n    (html, fm) =>\n        <TitledCard title={fm.title}>\n            <Box dangerouslySetInnerHTML={{ __html: html }} />\n            <Link color=\"refcolor\" href={fm.readmore_uri}>\n                Read more...\n          </Link>\n\n        </TitledCard>,\n));\n\nexport default LatestUpdateCard;\n","import * as React from \"react\";\nimport { Box, Center, Flex, Image, Link } from \"@chakra-ui/react\";\nimport TitledCard from \"./titled-card\";\nimport { LoadWithMD } from \"../../md-graphql\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface FrontmatterProps {\n    title: string;\n    image_path: string;\n    image_alt: string;\n    readmore_uri: string;\n}\n\nconst ShortAboutCard = () => {\n    const mugshotData = useStaticQuery(graphql`\n    {\n      allFile(filter: { sourceInstanceName: { eq: \"assets\" }, name: { eq: \"smallmugshot\" } }) {\n        edges {\n          node {\n            publicURL\n          }\n        }\n      }\n    }\n    `);\n\n    return LoadWithMD<FrontmatterProps>(\n        \"short-about.md\",\n        (html, fm) => (<TitledCard title={fm.title}>\n            <Flex direction={[\"column\", \"row\"]}>\n                <Center w={[\"100%\", \"32\"]} mr={[\"0\", \"4\"]} mb={[\"4\", \"0\"]}>\n                    <Image\n                        src={mugshotData.allFile.edges[0].node.publicURL}\n                        alt={fm.image_alt}\n                        w={[\"32\", \"100%\"]}\n                    />\n                </Center>\n                <Box flex=\"1\" >\n                    <Box dangerouslySetInnerHTML={{ __html: html }} />\n                    <Link color=\"refcolor\" href={fm.readmore_uri}>\n                        Read more...\n          </Link>\n                </Box>\n            </Flex>\n        </TitledCard >),\n    );\n}\n\nexport default ShortAboutCard;\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport LatestUpdateCard from \"../components/cards/latest-update\";\nimport ShortAboutCard from \"../components/cards/short-about\";\nimport CoverImageLayout from \"../components/layouts/cover-image\";\n\nconst IndexPage = () => {\n    return (\n        <CoverImageLayout\n            pageName=\"homepage\"\n            coverImgSrc=\"/assets/img/homepage.gif\"\n            coverImgAlt=\"Gondwana\"\n        >\n            <Flex direction=\"column\" maxW=\"100vw\">\n                <Box mb=\"4\">\n                    <ShortAboutCard />\n                </Box>\n                <Box>\n                    <LatestUpdateCard />\n                </Box>\n            </Flex>\n        </CoverImageLayout>\n    );\n};\n\nexport default IndexPage;\n","import * as React from \"react\";\nimport Card from \"../card\";\n\nimport { Box, Flex, Heading } from \"@chakra-ui/react\";\n\ninterface TitledCardProps {\n    title: string;\n    children?: React.ReactNode;\n}\n\nconst TitledCard = (props: TitledCardProps) => {\n    return (\n        <Card w=\"100%\" h=\"100%\">\n            <Flex direction=\"column\" maxW=\"100%\">\n                <Box\n                    w=\"100%\"\n                    borderBottomColor=\"seperatorcolor\"\n                    borderBottomWidth=\"thin\"\n                    mb=\"4\"\n                >\n                    <Heading fontFamily=\"heading\" size=\"lg\">\n                        {props.title}\n                    </Heading>\n                </Box>\n                <Box color=\"contentcolor\" maxW=\"100%\">\n                    {props.children}\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n\nexport default TitledCard;\n","import * as React from \"react\";\n\nimport { graphql, StaticQuery } from \"gatsby\";\n\nconst fetchQuery = graphql`\n        query MarkdownFiles {\n          allMarkdownRemark {\n            edges {\n              node {\n                html\n                frontmatter {\n                  title,\n                  image_alt,\n                  image_path,\n                  readmore_uri,\n                }\n                fileAbsolutePath\n              }\n            }\n          }\n        }\n    `;\n\ntype QueryReturnType = {\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        html: string;\n        frontmatter: any;\n        fileAbsolutePath: string;\n      };\n    }[];\n  };\n};\n\nexport function LoadWithMD<FrontmatterProps>(\n  filePath: string,\n  render: (html: string, fm: FrontmatterProps) => React.ReactNode,\n): JSX.Element {\n  return (<StaticQuery\n    query={fetchQuery}\n    render={(data: QueryReturnType) => {\n      const nodes = data.allMarkdownRemark.edges.map((x) => x.node);\n      const pattern = new RegExp(filePath, \"g\");\n\n      const fileInfo = nodes.find(({ fileAbsolutePath }) =>\n        fileAbsolutePath.match(pattern)\n      );\n\n      const { html, frontmatter } = fileInfo as {\n        html: string;\n        frontmatter: FrontmatterProps;\n        fileAbsolutePath: string;\n      };\n\n      return render(html, frontmatter);\n    }}\n  />);\n}\n","import * as React from \"react\";\nimport { Box, Center, Flex, Heading, Image } from \"@chakra-ui/react\";\nimport Card from \"../card\";\n\ninterface CoverImageCardProps {\n  title?: string;\n  src: string;\n  alt: string;\n}\nconst CoverImageCard = (props: CoverImageCardProps) => {\n  return (\n    <Card w=\"100%\">\n      <Flex direction=\"column\">\n        {props.title &&\n          <Box\n            w=\"100%\"\n            borderBottomColor=\"seperatorcolor\"\n            borderBottomWidth=\"thin\"\n            mb=\"4\"\n          >\n            <Heading fontFamily=\"heading\" size=\"lg\">\n              {props.title}\n            </Heading>\n          </Box>}\n        <Box color=\"contentcolor\">\n          <Center>\n            <Image\n              src={props.src}\n              alt={props.alt}\n              width={[\"100%\", \"max(30vh, 100%)\"]}\n            />\n          </Center>\n        </Box>\n      </Flex>\n    </Card>\n  );\n};\n\nexport default CoverImageCard;\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport React from \"react\";\nimport Base from \"../base\";\nimport CoverImageCard from \"../cards/cover-image-card\";\nimport { LinkName } from \"../menu\";\n\ninterface CoverImageLayoutProps {\n    pageName: LinkName;\n    pageTitle?: string;\n    coverImgSrc: string;\n    coverImgAlt: string;\n    children?: React.ReactNode;\n}\n\nconst CoverImageLayout = (props: CoverImageLayoutProps) => {\n    const {\n        pageName,\n        pageTitle,\n        coverImgSrc,\n        coverImgAlt,\n        children,\n    } = props;\n\n    const coverImgFetch = useStaticQuery(graphql`\n    query CoverImages {\n      allFile(filter: { sourceInstanceName: { eq: \"assets\" } }) {\n        edges {\n          node {\n            publicURL\n            absolutePath\n          }\n        }\n      }\n    }\n    `);\n\n    const coverImg = coverImgFetch.allFile.edges.map(x => x.node).find(x => x.absolutePath.match(coverImgSrc));\n\n    return (\n        <Base pageName={pageName}>\n            <Flex direction={[\"column\", \"column\", \"row\"]} w=\"100%\">\n                <Box flex=\"2\" mr={[\"0\", \"0\", \"4\"]} mb={[\"4\", \"4\", \"0\"]} w={[\"100%\", \"auto\", \"auto\"]}>\n                    <CoverImageCard\n                        title={pageTitle}\n                        src={coverImg.publicURL}\n                        alt={coverImgAlt}\n                    />\n                </Box>\n                <Box flex=\"1\" minW=\"md\">\n                    {children}\n                </Box>\n            </Flex>\n        </Base>\n    );\n};\n\nexport default CoverImageLayout;\n"],"sourceRoot":""}